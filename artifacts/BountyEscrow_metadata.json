{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "usdc_",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "_feeBps",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "_feeVault",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "initialOwner",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "AddressEmptyCode",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "AddressInsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "AlreadyExists",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DeadlineNotReached",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "EnforcedPause",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ExpectedPause",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailedInnerCall",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidParams",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MathOverflowedMulDiv",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotOpen",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotResolver",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotSponsor",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ReentrancyGuardReentrantCall",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "bits",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "SafeCastOverflowedUintDowncast",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "SafeERC20FailedOperation",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ZeroAddress",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ZeroAmount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "bountyId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sponsor",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "repoIdHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "issueNumber",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "deadline",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "resolver",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "BountyCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "bountyId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sponsor",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Canceled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "feeBps",
						"type": "uint16"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "feeVault",
						"type": "address"
					}
				],
				"name": "FeeParamsUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "bountyId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newAmount",
						"type": "uint256"
					}
				],
				"name": "Funded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "bountyId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sponsor",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Refunded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "bountyId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "net",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"name": "Resolved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "MAX_FEE_BPS",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "bountyId",
						"type": "bytes32"
					}
				],
				"name": "cancel",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sponsor",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "repoIdHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint64",
						"name": "issueNumber",
						"type": "uint64"
					}
				],
				"name": "computeBountyId",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "bountyId",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "resolver",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "repoIdHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint64",
						"name": "issueNumber",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "deadline",
						"type": "uint64"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "createBounty",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "bountyId",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "feeBps",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "feeVault",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "bountyId",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "fund",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "bountyId",
						"type": "bytes32"
					}
				],
				"name": "getBounty",
				"outputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "repoIdHash",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "sponsor",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "resolver",
								"type": "address"
							},
							{
								"internalType": "uint96",
								"name": "amount",
								"type": "uint96"
							},
							{
								"internalType": "uint64",
								"name": "deadline",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "issueNumber",
								"type": "uint64"
							},
							{
								"internalType": "enum BountyEscrow.Status",
								"name": "status",
								"type": "uint8"
							}
						],
						"internalType": "struct BountyEscrow.Bounty",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "bountyId",
						"type": "bytes32"
					}
				],
				"name": "refundExpired",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "bountyId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					}
				],
				"name": "resolve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "_feeBps",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "_feeVault",
						"type": "address"
					}
				],
				"name": "setFeeParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "usdc",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "usdcDecimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"custom:oz-version": "- OpenZeppelin 5.0.2 (imports pinned via versioned paths).",
			"custom:security": "- Resolver authority is scoped per bounty; cannot change post-creation. - Sponsor is the caller that created the bounty; only sponsor can top-up/cancel/refund. - No arbitrary token transfers; only the configured _usdc is handled. - Fee bounded by MAX_FEE_BPS (10%).",
			"details": "Design: - Token: single ERC-20 (intended USDC). Address immutable. Decimals cached (best-effort, fallback=6). - State machine per-bounty: None → Open → (Resolved | Refunded | Canceled). Terminal states are final. - Funds held in-contract; payouts are pull-style via resolver/sponsor actions. - Fee assessed only on successful resolution; transfers: recipient (net) + feeVault (fee). - Reentrancy: public state-changing entrypoints are nonReentrant; CEI respected. - Pausability: owner can pause/unpause all state-changing flows.",
			"errors": {
				"AddressEmptyCode(address)": [
					{
						"details": "There's no code at `target` (it is not a contract)."
					}
				],
				"AddressInsufficientBalance(address)": [
					{
						"details": "The ETH balance of the account is not enough to perform the operation."
					}
				],
				"EnforcedPause()": [
					{
						"details": "The operation failed because the contract is paused."
					}
				],
				"ExpectedPause()": [
					{
						"details": "The operation failed because the contract is not paused."
					}
				],
				"FailedInnerCall()": [
					{
						"details": "A call to an address target failed. The target may have reverted."
					}
				],
				"MathOverflowedMulDiv()": [
					{
						"details": "Muldiv operation overflow."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"ReentrancyGuardReentrantCall()": [
					{
						"details": "Unauthorized reentrant call."
					}
				],
				"SafeCastOverflowedUintDowncast(uint8,uint256)": [
					{
						"details": "Value doesn't fit in an uint of `bits` size."
					}
				],
				"SafeERC20FailedOperation(address)": [
					{
						"details": "An operation with an ERC20 token failed."
					}
				]
			},
			"events": {
				"BountyCreated(bytes32,address,bytes32,uint64,uint64,address,uint256)": {
					"params": {
						"amount": "Initial funded amount (USDC units).",
						"bountyId": "Deterministic id: keccak256(sponsor, repoIdHash, issueNumber).",
						"deadline": "Expiration timestamp for refund eligibility.",
						"issueNumber": "Issue number within the repository.",
						"repoIdHash": "Repository identifier hash associated with the issue.",
						"resolver": "Address authorized to resolve this bounty.",
						"sponsor": "Bounty sponsor (msg.sender of createBounty)."
					}
				},
				"Canceled(bytes32,address,uint256)": {
					"params": {
						"amount": "Amount returned.",
						"bountyId": "Id of the bounty.",
						"sponsor": "Sponsor receiving the returned funds."
					}
				},
				"FeeParamsUpdated(uint16,address)": {
					"params": {
						"feeBps": "New fee in basis points.",
						"feeVault": "Address to receive fees."
					}
				},
				"Funded(bytes32,uint256)": {
					"params": {
						"bountyId": "Id of the bounty funded.",
						"newAmount": "New total escrowed amount after top-up."
					}
				},
				"Paused(address)": {
					"details": "Emitted when the pause is triggered by `account`."
				},
				"Refunded(bytes32,address,uint256)": {
					"params": {
						"amount": "Amount refunded.",
						"bountyId": "Id of the bounty.",
						"sponsor": "Sponsor receiving the refund."
					}
				},
				"Resolved(bytes32,address,uint256,uint256)": {
					"params": {
						"bountyId": "Id of the bounty.",
						"fee": "Amount sent to feeVault.",
						"net": "Amount sent to recipient (gross - fee).",
						"recipient": "Address receiving the net payout."
					}
				},
				"Unpaused(address)": {
					"details": "Emitted when the pause is lifted by `account`."
				}
			},
			"kind": "dev",
			"methods": {
				"cancel(bytes32)": {
					"details": "Only sponsor; bounty must be Open. Sets status to Canceled and returns all funds.",
					"params": {
						"bountyId": "Target bounty."
					}
				},
				"computeBountyId(address,bytes32,uint64)": {
					"details": "Establishes a one-bounty-per (sponsor, repoIdHash, issueNumber) invariant.",
					"params": {
						"issueNumber": "Issue number reference.",
						"repoIdHash": "Repository identifier hash.",
						"sponsor": "Address of the sponsor (creator/funder)."
					},
					"returns": {
						"bountyId": "keccak256(sponsor, repoIdHash, issueNumber)."
					}
				},
				"constructor": {
					"params": {
						"_feeBps": "Initial protocol fee in basis points (≤ MAX_FEE_BPS).",
						"_feeVault": "Address to receive protocol fees on resolution.",
						"initialOwner": "Contract owner (admin for pause/fee params).",
						"usdc_": "ERC-20 token address used for all escrowed transfers (intended USDC)."
					}
				},
				"createBounty(address,bytes32,uint64,uint64,uint256)": {
					"details": "Requirements: - resolver != 0 - repoIdHash != 0 and issueNumber != 0 - deadline > now - amount > 0 - bountyId (sponsor, repoIdHash, issueNumber) must not already exist Effects: - Initializes Bounty struct with Status.Open - Transfers `amount` of _usdc from msg.sender to this contract",
					"params": {
						"amount": "Amount to escrow (USDC units).",
						"deadline": "Timestamp after which sponsor can refund if still Open.",
						"issueNumber": "Issue number within the repository.",
						"repoIdHash": "Repository identifier hash.",
						"resolver": "Address allowed to resolve this bounty."
					},
					"returns": {
						"bountyId": "Deterministic id for the created bounty."
					}
				},
				"fund(bytes32,uint256)": {
					"details": "Only the sponsor can fund. Amount must be > 0. Status must be Open.      Emits the new total escrowed amount for auditability.",
					"params": {
						"amount": "Additional amount to escrow.",
						"bountyId": "Target bounty."
					}
				},
				"getBounty(bytes32)": {
					"details": "Returns a memory copy; safe for off-chain indexing/UX.",
					"params": {
						"bountyId": "Bounty id to query."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"pause()": {
					"details": "Only owner. Idempotent via OZ Pausable."
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"refundExpired(bytes32)": {
					"details": "Only sponsor; requires block.timestamp ≥ deadline.      Sets status to Refunded and returns all funds.",
					"params": {
						"bountyId": "Target bounty."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"resolve(bytes32,address)": {
					"details": "Only the designated resolver; recipient must be non-zero.      Fee = floor(gross * feeBps / 10_000); Net = gross - fee.      Uses Math.mulDiv for precise, overflow-safe multiplication/division.",
					"params": {
						"bountyId": "Target bounty.",
						"recipient": "Address receiving the net payout."
					}
				},
				"setFeeParams(uint16,address)": {
					"details": "Only owner. Fee bounded by MAX_FEE_BPS. feeVault must be non-zero.",
					"params": {
						"_feeBps": "New fee in basis points.",
						"_feeVault": "New fee receiver address."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"unpause()": {
					"details": "Only owner. Idempotent via OZ Pausable."
				}
			},
			"stateVariables": {
				"FEE_DENOM": {
					"details": "Basis point denominator (10_000 = 100%)."
				},
				"_bounties": {
					"details": "BountyId (keccak256(sponsor, repoIdHash, issueNumber)) → Bounty."
				},
				"_usdc": {
					"details": "Immutable reference to the ERC-20 used for all transfers (intended USDC)."
				},
				"_usdcDecimals": {
					"details": "Cached decimals for display/UX; logic does not assume a specific precision."
				}
			},
			"title": "BountyEscrow",
			"version": 1
		},
		"userdoc": {
			"errors": {
				"AlreadyExists()": [
					{
						"notice": "Thrown when attempting to create a bounty that already exists."
					}
				],
				"DeadlineNotReached()": [
					{
						"notice": "Thrown when refund attempted before deadline."
					}
				],
				"InvalidParams()": [
					{
						"notice": "Thrown when parameters fail validation (range/overflow/state)."
					}
				],
				"NotOpen()": [
					{
						"notice": "Thrown when action requires an Open bounty but it is not Open."
					}
				],
				"NotResolver()": [
					{
						"notice": "Thrown when caller is not the designated resolver."
					}
				],
				"NotSponsor()": [
					{
						"notice": "Thrown when caller is not the bounty sponsor."
					}
				],
				"ZeroAddress()": [
					{
						"notice": "Thrown when an address argument is zero."
					}
				],
				"ZeroAmount()": [
					{
						"notice": "Thrown when an amount argument is zero."
					}
				]
			},
			"events": {
				"BountyCreated(bytes32,address,bytes32,uint64,uint64,address,uint256)": {
					"notice": "Emitted when a bounty is created and funded."
				},
				"Canceled(bytes32,address,uint256)": {
					"notice": "Emitted when an Open bounty is canceled by the sponsor before deadline."
				},
				"FeeParamsUpdated(uint16,address)": {
					"notice": "Emitted when fee parameters are updated by owner."
				},
				"Funded(bytes32,uint256)": {
					"notice": "Emitted when the sponsor tops up an existing Open bounty."
				},
				"Refunded(bytes32,address,uint256)": {
					"notice": "Emitted when an expired Open bounty is refunded to the sponsor."
				},
				"Resolved(bytes32,address,uint256,uint256)": {
					"notice": "Emitted on successful resolution and payout."
				}
			},
			"kind": "user",
			"methods": {
				"MAX_FEE_BPS()": {
					"notice": "Maximum protocol fee in basis points (1_000 = 10%)."
				},
				"cancel(bytes32)": {
					"notice": "Cancel an Open bounty before the deadline and retrieve funds."
				},
				"computeBountyId(address,bytes32,uint64)": {
					"notice": "Compute the deterministic bounty id."
				},
				"createBounty(address,bytes32,uint64,uint64,uint256)": {
					"notice": "Create a new bounty and fund it in a single transaction."
				},
				"feeBps()": {
					"notice": "Protocol fee in basis points (out of 10_000)."
				},
				"feeVault()": {
					"notice": "Address that receives protocol fees upon resolution."
				},
				"fund(bytes32,uint256)": {
					"notice": "Top up an existing Open bounty."
				},
				"getBounty(bytes32)": {
					"notice": "Read the full Bounty struct for a given id."
				},
				"pause()": {
					"notice": "Pause all state-changing functions."
				},
				"refundExpired(bytes32)": {
					"notice": "Refund an Open bounty after the deadline back to the sponsor."
				},
				"resolve(bytes32,address)": {
					"notice": "Resolve an Open bounty to a recipient, paying out net amount and fee."
				},
				"setFeeParams(uint16,address)": {
					"notice": "Update protocol fee and fee vault address."
				},
				"unpause()": {
					"notice": "Unpause all state-changing functions."
				},
				"usdc()": {
					"notice": "ERC-20 token used for escrow (intended USDC)."
				},
				"usdcDecimals()": {
					"notice": "Cached decimals of the escrow token (best-effort; default 6)."
				}
			},
			"notice": "Minimal, USDC-based escrow for GitHub issue bounties.         Sponsor funds a bounty; a designated resolver can settle to a recipient before the deadline;         sponsors can cancel or refund after deadline. Owner sets fee params and can pause.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/BountyEscrow.sol": "BountyEscrow"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts@5.0.2/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850",
				"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"
			]
		},
		"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
			"license": "MIT",
			"urls": [
				"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
				"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
			]
		},
		"@openzeppelin/contracts@5.0.2/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
				"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/Address.sol": {
			"keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
				"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/Pausable.sol": {
			"keccak256": "0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a4b83328c98d518a2699c2cbe9e9b055e78aa57fa8639f1b88deb8b3750b5dc",
				"dweb:/ipfs/QmXdcYj5v7zQxXFPULShHkR5p4Wa2zYuupbHnFdV3cHYtc"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/ReentrancyGuard.sol": {
			"keccak256": "0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236",
			"license": "MIT",
			"urls": [
				"bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02",
				"dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/math/Math.sol": {
			"keccak256": "0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875",
				"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"
			]
		},
		"@openzeppelin/contracts@5.0.2/utils/math/SafeCast.sol": {
			"keccak256": "0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe",
			"license": "MIT",
			"urls": [
				"bzz-raw://4aed79c0fa6f0546ed02f2f683e8f77f0fd2ed7eb34d8bbf3d373c9a6d95b13c",
				"dweb:/ipfs/QmWqVz6UAVqmnWU5pqYPt1o6iDEZyPaBraAA3rKfTTSfYj"
			]
		},
		"contracts/BountyEscrow.sol": {
			"keccak256": "0x22584ae453b120aaffab4bb6eefb966be21d4385e823485f06fce197f73a5002",
			"license": "MIT",
			"urls": [
				"bzz-raw://57d4ed9544a81ae92eb1700a67113866f594fd289a011c094514626193d5d301",
				"dweb:/ipfs/QmacQtN7kUsMmpN6edQ2JpbRUe2V2a94MPp9CTNxoDrEAF"
			]
		}
	},
	"version": 1
}